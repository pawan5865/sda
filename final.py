import tkinter
from tkinter import *
from tkinter import ttk
from tkinter import filedialog
from tkinter import messagebox as msg
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
class Root(Tk):
	def __init__(self):
		super(Root,self).__init__()
		self.title("Solar Data Analyser")
		self.minsize(670,500)
		self.maxsize(670,500)
		self.createmenu()
		self.labelFrame = ttk.LabelFrame(self,text= "Open File of 2017")
		self.labelFrame.grid(column=0,row=1)
		self.button()
		self.labelFrame1 = ttk.LabelFrame(self,text= "Open File of 2018")
		self.labelFrame1.grid(column=0,row=2)
		self.button1()
		self.button3()
		self.butgraph()
		self.butgraph2()
	def createmenu(self):
		menubar = Menu(self)
		self.config(menu = menubar)
		file_menu = Menu(menubar,tearoff = 0)
		menubar.add_cascade(label = "File", menu = file_menu)
		file_menu.add_command(label = "New",command=self.newf)
		file_menu.add_command(label = "Exit", command=self.closewindow)
		help_menu = Menu(menubar,tearoff = 0)
		menubar.add_cascade(label = "Help", menu = help_menu)
		help_menu.add_command(label = "About",command=self.aboutf)
	def closewindow(self):
		self.quit()
		exit()
	def newf(self):
		msg.showerror("Error","This request is not acceptable")
	def aboutf(self):
		msg.showinfo("About","Developed By: Pawan Kumar Singh")
	def button(self):
		self.button = ttk.Button(self.labelFrame, text="Browse a File",command=self.fileDialog)
		self.button.grid(column=0,row=1)
	def button1(self):
		self.button1 = ttk.Button(self.labelFrame1, text="Browse a File",command=self.fileDialog1)
		self.button1.grid(column=0,row=1)
	def fileDialog(self):
		self.filename=filedialog.askopenfilename(initialdir = "/",title="Select a File",filetype=(("Excel WorkSheet","*.xlsx"),("All Files","*.*")))
		self.label = ttk.Label(self.labelFrame,text="")
		self.label.grid(column=2,row=0)
		self.label.configure(text = self.filename)
	def fileDialog1(self):
		self.filename1=filedialog.askopenfilename(initialdir = "/",title="Select a File",filetype=(("Excel WorkSheet","*.xlsx"),("All Files","*.*")))
		self.label1 = ttk.Label(self.labelFrame1,text="")
		self.label1.grid(column=2,row=0)
		self.label1.configure(text = self.filename1)
	
	def button3(self):
		self.button3 = ttk.Button(self, text="Start the Analysis",command=self.prog)
		self.button3.grid(column=5,row=1)

	def prog(self):
		file_2017 = pd.ExcelFile(self.filename)
		file_2018 = pd.ExcelFile(self.filename1)
		df1 = file_2017.parse('Sheet1')
		df4 = file_2018.parse('Sheet1')
		aug17main1 = df1.INV_1_WATT
		aug17avg = aug17main1.mean()
		aug17avg1 = aug17avg
		a1 = IntVar(value=aug17avg1)
		aug17main2 = df1.INV_2_WATT
		aug17avg2 = aug17main2.mean()
		a2 = IntVar(value=aug17avg2)
		aug18main1 = df4.INV_1_WATT
		aug18avg1 = aug18main1.mean()
		a3 = IntVar(value=aug18avg1)
		aug18main2 = df4.INV_2_WATT
		aug18avg2 = aug18main2.mean()
		a4 = IntVar(value=aug18avg2)
		sol_irr1 = df1.SOLAR_IRR
		sol_avg = sol_irr1.mean()
		a5 = IntVar(value=sol_avg)
		sol_irr2 = df4.SOLAR_IRR
		sol_avg2 = sol_irr2.mean()
		a6 = IntVar(value=sol_avg2)
		aug17limit1 = (aug17avg1*5)/100
		aug17limit2 = (aug17avg2*5)/100
		aug18limit1 = (aug18avg1*5)/100
		aug18limit2 = (aug18avg2*5)/100
		auglimit1 = aug17main1 - aug17limit1
		auglimit2 = aug17avg2 - aug17limit2
		a8 = IntVar(value=auglimit2)
		auglimit1 = aug17avg1 - aug17limit1
		a7 = IntVar(value=auglimit1)
		aug17avg = (aug17avg1 + aug17avg2)/2
		aug18avg = (aug18avg1 + aug18avg2)/2
		peraug = ((aug18avg - aug17avg)/aug18avg)*100
		a9 = IntVar(value=peraug)
		sol_per = ((sol_avg2-sol_avg)/sol_avg2)*100
		a10 = IntVar(value=sol_per)
		l31 = Label(self,text="\n")
		l31.grid(column=0,row=4)
		l1 = Label(self,text="2017 (Average)")
		l1.grid(column=1,row=5)
		l32 = Label(self,text="\t")
		l32.grid(column=2,row=5)
		l27 = Label(self,text="2018 (Average)")
		l27.grid(column=3,row=5)
		l2 = Label(self,text="Inverter 1")
		l2.grid(column=0,row=6)
		l3 = Label(self,textvariable = a1)
		l3.grid(column=1,row=6)
		l4 = Label(self,textvariable = a3)
		l4.grid(column=3,row=6)
		l5 = Label(self,text="Inverter 2")
		l5.grid(column=0,row=7)
		l6 = Label(self,textvariable = a2)
		l6.grid(column=1,row=7)
		l7 = Label(self,textvariable = a4)
		l7.grid(column=3,row=7)
		l8 = Label(self,text="Solar IRR")
		l8.grid(column=0,row=8)
		l9 = Label(self,textvariable = a5)
		l9.grid(column=1,row=8)
		l10 = Label(self,textvariable = a6)
		l10.grid(column=3,row=8)
		l28 = Label(self,text="\n")
		l28.grid(column=0,row=9)
		l11 = Label(self,text = "Minimum value to be generated by Inverter 1: ")
		l11.grid(column=0,row=10)
		l12 = Label(self,textvariable=a7)
		l12.grid(column=1,row=10)
		l13 = Label(self,text="Minimum value to be generated by Inverter 2: ")
		l13.grid(column=0,row=11)
		l14 = Label(self,textvariable=a8)
		l14.grid(column=1,row=11)
		l29 = Label(self,text="\n")
		l29.grid(column=0,row=12)
		l15 = Label(self,text="The Total Loss/Gain in 2018 is: ")
		l15.grid(column=0,row=13)
		l16 = Label(self,textvariable=a9)
		l16.grid(column=1,row=13)
		l17 = Label(self,text="The Total Loss/Gain in Solar IRR in 2018 is: ")
		l17.grid(column=0,row=14)
		l18 = Label(self,textvariable=a10)
		l18.grid(column=1,row=14)
		l30 = Label(self,text="\n")
		l30.grid(column=0,row=15)
		if aug18avg1 < auglimit1:
			msg.showerror("Error","The power stored in Inverter 1 in 2018 is not upto the limit")
			if sol_per >=0:
				msg.showerror("Error","There is a problem in the Solar System for Inverter 1")
			else:
				msg.showinfo("Success","The System is perfect for Inverter 1")
				
		else:
			msg.showinfo("Success","The power stored is sufficient in Inverter 1")
			
		if aug18avg2 < auglimit2:
			msg.showerror("Error","The power stored in Inverter 2 in 2018 is not upto the limit")
			
			if sol_per >=0:
				msg.showerror("Error","There is a problem in the System for Inverter 2")
				
			else:
				msg.showinfo("Success","The System was perfect for Inverter 2")
				
		else:
			msg.showinfo("Success","The power stored is sufficient in Inverter 2")
		
	def butgraph(self):
		self.butgrph = ttk.Button(self, text="Graph 1",command=self.grph)
		self.butgrph.grid(column=3,row=17)
	def grph(self):
		f_2017 = pd.ExcelFile(self.filename)
		f_2018 = pd.ExcelFile(self.filename1)
		d1 = f_2017.parse('Sheet1')
		d4 = f_2018.parse('Sheet1')
		a17main1 = d1.INV_1_WATT
		a17avg = a17main1.mean()
		a17avg1 = a17avg
		a17main2 = d1.INV_2_WATT
		a17avg2 = a17main2.mean()
		a18main1 = d4.INV_1_WATT
		a18avg1 = a18main1.mean()
		a18main2 = d4.INV_2_WATT
		a18avg2 = a18main2.mean()
		name = ('Inv 1 2017','Inv 1 2018','Inv 2 2017','Inv 2 2018')
		val = (a17avg1,a18avg1,a17avg2,a18avg2)
		plt.bar(name,val)
		plt.show()
			
	def butgraph2(self):
		self.bgraph = ttk.Button(self,text="Graph 2",command=self.grp)
		self.bgraph.grid(column=5,row=17)
	
	def grp(self):
		fi_2017 = pd.ExcelFile(self.filename)
		fi_2018 = pd.ExcelFile(self.filename1)
		dfi1 = fi_2017.parse('Sheet1')
		dfi4 = fi_2018.parse('Sheet1')
		s_irr1 = dfi1.SOLAR_IRR
		s_avg = s_irr1.mean()
		s_irr2 = dfi4.SOLAR_IRR
		s_avg2 = s_irr2.mean()
		nameg = ('Solar IRR 2017','Solar IRR 2018')
		valg = (s_avg,s_avg2)
		plt.bar(nameg,valg)
		plt.show()

if __name__ == '__main__':
	root = Root()
	root.mainloop()
		